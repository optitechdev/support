#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import time
import requests
import json
from azure_chat_assistant import test_ai_connection

def test_ai_performance():
    """Testar AI-prestanda med olika konfigurationer"""
    print("üöÄ Testar AI-prestandaoptimering...")
    print("=" * 50)
    
    # Test 1: Anslutningstest
    print("\n1Ô∏è‚É£ Testar grundl√§ggande anslutning...")
    connection_start = time.time()
    connection_success = test_ai_connection()
    connection_time = time.time() - connection_start
    print(f"   Anslutningstest: {connection_time:.2f}s")
    
    if not connection_success:
        print("‚ùå Anslutningstest misslyckades. Kontrollera API-nycklar.")
        return
    
    # Test 2: Web API-test (om servern k√∂rs)
    print("\n2Ô∏è‚É£ Testar web API-prestanda...")
    test_messages = [
        "Hej, kan du hj√§lpa mig?",
        "Vad g√∂r Optitech?",
        "Jag beh√∂ver support",
        "Tack f√∂r hj√§lpen!"
    ]
    
    total_times = []
    
    for i, message in enumerate(test_messages, 1):
        print(f"   Test {i}: '{message[:30]}...'")
        start_time = time.time()
        
        try:
            response = requests.post('http://localhost:5000/chat', 
                json={
                    'message': message,
                    'conversation_history': []
                },
                timeout=30
            )
            
            end_time = time.time()
            duration = end_time - start_time
            total_times.append(duration)
            
            if response.status_code == 200:
                data = response.json()
                if data['success']:
                    print(f"   ‚úÖ Svar p√• {duration:.2f}s")
                else:
                    print(f"   ‚ùå API-fel: {data.get('error', 'Ok√§nt fel')}")
            else:
                print(f"   ‚ùå HTTP {response.status_code}")
                
        except requests.exceptions.ConnectionError:
            print(f"   ‚ö†Ô∏è  Server inte ig√•ng - hoppar √∂ver web API-test")
            break
        except Exception as e:
            print(f"   ‚ùå Fel: {str(e)}")
    
    # Resultat
    print("\nüìä RESULTAT:")
    print("=" * 50)
    
    if total_times:
        avg_time = sum(total_times) / len(total_times)
        min_time = min(total_times)
        max_time = max(total_times)
        
        print(f"   Genomsnittlig svarstid: {avg_time:.2f}s")
        print(f"   Snabbaste svar: {min_time:.2f}s")
        print(f"   L√•ngsammaste svar: {max_time:.2f}s")
        
        # Bed√∂mning
        if avg_time < 3:
            print("   üü¢ UTM√ÑRKT prestanda!")
        elif avg_time < 5:
            print("   üü° BRA prestanda")
        elif avg_time < 10:
            print("   üü† ACCEPTABEL prestanda")
        else:
            print("   üî¥ L√ÖNGSAM prestanda - beh√∂ver optimering")
    
    print(f"\nüí° Tips f√∂r att f√∂rb√§ttra prestanda:")
    print(f"   ‚Ä¢ Minska max_tokens f√∂r snabbare svar")
    print(f"   ‚Ä¢ Anv√§nd l√§gre temperature (0.1-0.3)")
    print(f"   ‚Ä¢ Korta system-meddelanden")
    print(f"   ‚Ä¢ Implementera caching f√∂r vanliga fr√•gor")
    print(f"   ‚Ä¢ Anv√§nd connection pooling")

if __name__ == "__main__":
    test_ai_performance()
