import os
import requests
import uuid
import datetime
import json
import re
import logging
from dotenv import load_dotenv
from optitech_supportmail import send_support_email

load_dotenv()

# Konfigurera logging
logging.basicConfig(level=logging.ERROR)
logger = logging.getLogger(__name__)

API_KEY = os.getenv("AZURE_OPENAI_API_KEY")
ENDPOINT = "https://yazan-me7jxcy8-eastus2.cognitiveservices.azure.com/"
DEPLOYMENT_NAME = "gpt-4.1"
API_VERSION = "2025-01-01-preview"

url = f"{ENDPOINT}openai/deployments/{DEPLOYMENT_NAME}/chat/completions?api-version={API_VERSION}"
headers = {
    "Content-Type": "application/json",
    "api-key": API_KEY
}

class AISupport:
    def __init__(self):
        self.messages = [
            {
                "role": "system",
                "content": """Du √§r en v√§nlig AI-assistent f√∂r Optitech Sverige. 

VIKTIGT: Du ska F√ñRST chatta naturligt med kunden och hj√§lpa dem s√• gott du kan. 
Svara p√• fr√•gor, l√∂s problem och ge teknisk support.

BARA n√§r kunden uttryckligen ber om att "skapa ett √§rende" eller "√∂ppna ett support√§rende" 
ELLER n√§r du inte kan l√∂sa problemet sj√§lv, d√• ska du samla in:
- Kundens namn  
- E-postadress
- Kort beskrivning av problemet

N√§r du har all denna info, svara EXAKT: "SKAPA_√ÑRENDE: [namn] | [email] | [beskrivning]"

Annars - chatta bara normalt och hj√§lp kunden s√• gott du kan!"""
            }
        ]
        
    def extract_ticket_data(self, ai_response):
        """Extraherar √§rendedata fr√•n AI:ns svar"""
        pattern = r"SKAPA_√ÑRENDE:\s*([^|]+)\s*\|\s*([^|]+)\s*\|\s*(.+)"
        match = re.search(pattern, ai_response)
        
        if match:
            return {
                "namn": match.group(1).strip(),
                "email": match.group(2).strip(), 
                "beskrivning": match.group(3).strip()
            }
        return None
    
    def chat_with_ai(self, user_input):
        """Skickar meddelande till AI och f√•r svar"""
        self.messages.append({"role": "user", "content": user_input})
        
        try:
            response = requests.post(url, headers=headers, json={
                "messages": self.messages,
                "temperature": 0.7,
                "max_tokens": 1500
            })
            
            if response.status_code == 200:
                ai_reply = response.json()["choices"][0]["message"]["content"]
                self.messages.append({"role": "assistant", "content": ai_reply})
                return ai_reply
            else:
                logger.error(f"AI API error: {response.status_code}")
                return "‚ùå AI-tj√§nsten √§r tillf√§lligt otillg√§nglig. F√∂rs√∂k igen senare."
        except Exception as e:
            logger.error(f"AI request error: {str(e)}")
            return "‚ùå Tekniskt fel vid kommunikation med AI. F√∂rs√∂k igen senare."
    
    def create_support_ticket(self, ticket_data):
        """Skapar support√§rende och skickar e-post"""
        timestamp = datetime.datetime.now().strftime("%Y%m%d")
        ticket_id = f"OPT-{timestamp}-{uuid.uuid4().hex[:4].upper()}"
        
        print(f"\nüé´ Skapar support√§rende: {ticket_id}")
        
        try:
            send_support_email(
                customer_name=ticket_data["namn"],
                customer_email=ticket_data["email"], 
                ticket_description=ticket_data["beskrivning"],
                ticket_id=ticket_id
            )
            return ticket_id, True
        except Exception as e:
            logger.error(f"Email sending failed for ticket {ticket_id}: {str(e)}")
            return ticket_id, False

def main():
    """Huvudfunktion f√∂r support-assistenten"""
    support = AISupport()
    
    print("üí¨ Hej! Jag √§r din AI-assistent fr√•n Optitech Sverige.")
    print("üí° St√§ll dina fr√•gor s√• hj√§lper jag dig s√• gott jag kan!")
    print("üìù Skriv 'sluta' f√∂r att avsluta.\n")
    
    while True:
        try:
            user_input = input("Du: ").strip()
            
            if user_input.lower() in ['sluta', 'exit', 'quit', 'bye']:
                print("üëã Tack f√∂r att du anv√§nde v√•r support! Ha en bra dag!")
                break
            
            if not user_input:
                continue
            
            # F√• AI:ns svar
            ai_response = support.chat_with_ai(user_input)
            
            # Kolla om AI vill skapa ett √§rende
            ticket_data = support.extract_ticket_data(ai_response)
            
            if ticket_data:
                # Ta bort SKAPA_√ÑRENDE delen fr√•n svaret
                clean_response = re.sub(r"SKAPA_√ÑRENDE:[^|]+\|[^|]+\|.+", "", ai_response).strip()
                if clean_response:
                    print(f"\nü§ñ AI: {clean_response}")
                
                # Skapa √§rendet
                ticket_id, email_sent = support.create_support_ticket(ticket_data)
                print(f"‚úÖ Support√§rende {ticket_id} har skapats och e-post √§r skickad!")
                print("üìß Du kommer f√• en bekr√§ftelse p√• din e-post inom kort.")
                print("üîÑ Forts√§tt chatta f√∂r mer hj√§lp!\n")
            
            else:
                print(f"\nü§ñ AI: {ai_response}")
            
        except KeyboardInterrupt:
            print("\nüëã Tack f√∂r att du anv√§nde v√•r support! Ha en bra dag!")
            break
        except Exception as e:
            logger.error(f"Unexpected error: {str(e)}")
            print("‚ùå Ett tekniskt fel uppstod. F√∂rs√∂k igen.")

if __name__ == "__main__":
    main()
